# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Ui_Level1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtMultimedia import QMediaPlayer, QMediaContent
from PyQt5.QtMultimediaWidgets import QVideoWidget
from PyQt5.QtWidgets import QMainWindow, QApplication, QLabel, QDialog
from PyQt5.QtGui import QPixmap
import cv2
import threading
import sys

# Import window
# from ShowQR import Ui_QR_WinDow
from ShowQRDia import Ui_Dialog
from Menu import Ui_Menu_Food

# Global variables
distance = 1000
ui = None

# Constants
KNOWN_DISTANCE = 76.2  # centimeter
KNOWN_WIDTH = 14.3  # centimeter
GREEN = (0, 255, 0)
RED = (0, 0, 255)
WHITE = (255, 255, 255)
fonts = cv2.FONT_HERSHEY_COMPLEX

face_detector = cv2.CascadeClassifier("../haarcascade_frontalface_default.xml")

def focal_length(measured_distance, real_width, width_in_rf_image):
    return (width_in_rf_image * measured_distance) / real_width

def distance_finder(focal_length, real_face_width, face_width_in_frame):
    return (real_face_width * focal_length) / face_width_in_frame

def face_data(image):
    face_width = 0
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    faces = face_detector.detectMultiScale(gray_image, 1.3, 5)
    for (x, y, h, w) in faces:
        cv2.rectangle(image, (x, y), (x + w, y + h), WHITE, 1)
        face_width = w
    return face_width

class Ui_MainWindow(QMainWindow):
    distance_signal = QtCore.pyqtSignal()  # Define a signal

    def __init__(self):
        super().__init__()
        self.setupUi(self)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1224, 757)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 1221, 701))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1224, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Connect the signal to the slot
        self.distance_signal.connect(self.handleDistanceSignal)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

    def showVideo(self):
        global mediaPlayer, videoWidget
        # Play
        self.mediaPlayer = QMediaPlayer(None, QMediaPlayer.VideoSurface)
        self.mediaPlayer.setMedia(QMediaContent(QtCore.QUrl.fromLocalFile('D:\\internship\\Project\\Tablet_menu\\UI_TABLET_MENU\\video\\advertisement.mp4')))

        # set Widget
        self.videoWidget = QVideoWidget()
        self.verticalLayout.addWidget(self.videoWidget)
        self.mediaPlayer.setVideoOutput(self.videoWidget)
        self.mediaPlayer.play()

    def stopVideo(self):
        self.mediaPlayer.stop()
        self.videoWidget.deleteLater()  # Delete the video widget

    def openWindow(self):
        self.stopVideo()  # Dừng video trước khi mở dialog
        self.close()  # Đóng MainWindow
        self.dialog = QDialog()
        self.ui = Ui_Dialog()
        self.ui.setupUi(self.dialog)
        self.dialog.show()

        QtCore.QTimer.singleShot(10000, self.switchToNewWindow)  # Chuyển sau 10 giây

    def handleDistanceSignal(self):
        self.openWindow()

    def switchToNewWindow(self):
        self.dialog.close()  # Đóng dialog
        self.newWindow = QMainWindow()
        self.newUi = Ui_Menu_Food()
        self.newUi.setupUi(self.newWindow)
        self.newWindow.show()

# reading reference image from directory
ref_image = cv2.imread("D:\\internship\\Project\\Tablet_menu\\UI_TABLET_MENU\\img\\9x01_YGEO.jpg")
ref_image_face_width = face_data(ref_image)
focal_length_found = focal_length(KNOWN_DISTANCE, KNOWN_WIDTH, ref_image_face_width)
print(focal_length_found)

def detectFace():
    global distance
    cap = cv2.VideoCapture(0)

    while True:
        _, frame = cap.read()
        face_width_in_frame = face_data(frame)
        if face_width_in_frame != 0:
            distance = distance_finder(focal_length_found, KNOWN_WIDTH, face_width_in_frame)
            cv2.putText(frame, f"Distance = {round(distance, 2)} CM", (50, 50), fonts, 1, (WHITE), 2)
            print(distance)
            if distance < 150:
                ui.distance_signal.emit()  # Emit the signal to stop the video and open the QR window
                break
        cv2.imshow("frame", frame)
        if cv2.waitKey(1) == ord("q"):
            break
    cap.release()
    cv2.destroyAllWindows()

def showUi():
    global ui
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = Ui_MainWindow()
    ui = MainWindow
    ui.setupUi(MainWindow)
    ui.showVideo()
    MainWindow.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    # Create threads
    thread1 = threading.Thread(target=detectFace)
    thread2 = threading.Thread(target=showUi)

    # Start threads
    thread1.start()
    thread2.start()

    # Wait for threads to finish
    thread1.join()
    thread2.join()
